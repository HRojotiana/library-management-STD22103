openapi: 3.0.3
info:
  title: Library API
  version: 1.3.1
  description: STD22103
servers:
  - url: https://library.com
tags:
  - name: Books  
  - name: Authors
  - name: Import
  - name: Visitors
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: the starting date
          required: false
          schema: 
            type: string
            format: date
        - name: finalDate
          in: query
          description: the ending date
          required: false
          schema: 
            type: string
            format: date
        - $ref: "#/components/parameters/QueryPage"
        - $ref: "#/components/parameters/QueryPageSize"
        - name: status
          in: query
          description: Status if the book is available pr not
          required: false
          schema:
            type: string
            default: "AVAILABLE"
      security:
        - oauth2: ['read']
      responses:
        200:
           $ref: "#/components/responses/BookList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /authors:
    get:
      summary: Get all authors 
      description: The returned authors are ordered by name 
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: name
          description: filter authors by name
          required: false
          schema: 
            type: string
      security:
        - oauth2: ['read']
      responses:
        200: 
          $ref: "#/components/responses/AuthorList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody: 
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: "#/components/responses/AuthorList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /authors/{id}:
    delete:
      summary: Delete an author
      description: Delete an author by id 
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: id 
          in: path
          required: true
          schema: 
            type: string
      responses:
        200:
          $ref: "#/components/responses/AuthorList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /multipleDelete:
    delete: 
      summary: Delete multiple authors
      tags:
        - Authors
      description: Delete multiple authors by their ids
      requestBody: 
        content:
          application/json: 
            schema: 
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Multiple authors deleted
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /authors/page/{page}/pageSize/{pageSize}:
    get:
      summary: Get all authors
      operationId: getAuthorsPagination
      tags:
        - Authors
      parameters:
        - $ref: "#/components/parameters/PathPage"
        - $ref: "#/components/parameters/PathPageSize"
      security:
        - oauth2: ['read']
      responses: 
        200:
          $ref: "#/components/responses/AuthorList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
        
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema: 
            type: string
          required: true
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /books/authors: 
    put:
      tags:
        - Books
      operationId: updateBookAuthor 
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items: 
                $ref: "#/components/schemas/UpdateBookAuthor"  
      responses:
        200:
          $ref: "#/components/responses/BookList_200"   
        400: 
          $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403" 
        500: 
          $ref: "#/components/responses/500"
  /books/import:
    post:
      summary: Import books from Excel or JSON
      tags:
        - Import
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: object  
        description: book files (Excel or JSON)
      security:
        - oauth2: ['admin']
      responses:
        200:
          $ref: "#/components/responses/BookList_200"
        400: 
         $ref: "#/components/responses/400"
        403: 
          $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /authors/import:
    post:
      summary: Import authors from Excel or JSON
      tags:
        - Import
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: object  
        description: auhtors files (JSON or Excel)
      security:
        - oauth2: ['admin']
      responses:
        200:
          $ref: "#/components/responses/AuthorList_200"
        400: 
          $ref: "#/components/responses/400"
        403: 
           $ref: "#/components/responses/403"
        500: 
          $ref: "#/components/responses/500"
  /books/{visitorId}/{bookId}/borrow:
    put:
      summary: Borrowing a book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/PathBookId"
          description: The id of the visitor who borrows the book
        - $ref: "#/components/parameters/PathVisitorId"
          description: The id of the book to be borrowed
      security:
        - oauth2: ['admin']
      responses:
        200:
          $ref: "#/components/responses/VisitorBook_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /books/{visitorId}/{bookId}/return:
    put:
      summary: Returning a book
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/PathBookId"
          description: The id of the visitor who returns the book
        - $ref: "#/components/parameters/PathVisitorId"
          description: The id of the book to be returned
      security:
        - oauth2: ['admin']
      responses:
        200:
          $ref: "#/components/responses/VisitorBook_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
  /visitors/{visitorId}/activities:
    get:
      summary: List of a visitor's activities
      tags:
        - Visitors
      parameters:
        - name: visitorId
          in: path
          description: the visitor's id
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          description: starting date
          required: false
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Ending date
          required: false
          schema:
            type: string
            format: date-time
        - name: period
          in: query
          description: Period (day, week or hour)
          required: false
          schema:
            type: string
            enum:
              - day
              - week
              - hour
      responses:
        200:
          $ref: "#/components/responses/VisitorActivity_200"
        400:
          $ref: "#/components/responses/400"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            author: 
              $ref: "#/components/schemas/Author"
    Author: 
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - F
            - M
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    VisitorActivity:
      type: object
      properties:
        book:
          $ref: "#/components/schemas/Book"
        activityType:
          type: string
          description: if it's a borrowing or returning
        activityDate:
          type: string
          format: date-time
          description: date and time of the activity
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - BORROWED
            - AVAILABLE
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId             
    ResponseStatus: 
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "OK"
    RequestBodyTemplate: 
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ResponseStatus"
        body: 
          type: object
    BadRequestBody:
      allOf:
        - $ref: "#/components/schemas/RequestBodyTemplate"
      example:
        status: 
          code: 400
          status: "Bad Request"
        body: {}
    ForbiddenBody:
      allOf:
        - $ref: "#/components/schemas/RequestBodyTemplate"
      example:
        status: 
          code: 403
          status: "Forbidden"
        body: {}
    InternalServerErrorBody:
      allOf:
        - $ref: "#/components/schemas/RequestBodyTemplate"
      example:
        status: 
          code: 500
          status: "Internal Server Error"
        body: {}
    BookListBody: 
      allOf:
         - $ref: "#/components/schemas/RequestBodyTemplate"
         - properties:
             body:
              type: array
              items: 
                $ref: "#/components/schemas/Book"
    AuthorListBody: 
      allOf:
         - $ref: "#/components/schemas/RequestBodyTemplate"
         - properties:
             body:
              type: array
              items: 
                $ref: "#/components/schemas/Author"
    VisitorBookBody:
      allOf:
        - $ref: "#/components/schemas/RequestBodyTemplate"
        - properties:
            body:
              type: object
              properties:
                book:
                  $ref: "#/components/schemas/Book"
                visitor:
                  $ref: "#/components/schemas/Visitor"
    VisitorActivityBody:
      allOf:
        - $ref: "#/components/schemas/RequestBodyTemplate"
        - properties:
            body:
              type: array
              items:
                $ref: "#/components/schemas/VisitorActivity"

    Body: 
      type: object
      oneOf:
        - $ref: "#/components/schemas/Book"
        - $ref: "#/components/schemas/Books"
        - $ref: "#/components/schemas/Author"
        - $ref: "#/components/schemas/Authors"
    Books: 
      type: array
      items: 
        $ref: "#/components/schemas/Book"
    Authors: 
      type: array
      items: 
        $ref: "#/components/schemas/Author" 
  parameters:
    QueryPage:
      name: queryPage 
      in: query
      required:  false
      schema: 
        type: integer
        default: 1
    QueryPageSize:
      name: queryPageSize
      in: query
      required:  false
      schema: 
        type: integer
        default: 50
    PathPage: 
      name: pathPage
      in: path
      required: false
      schema: 
        type: integer
        default: 1
    PathPageSize: 
      name: pathPageSize
      in: path
      required: false
      schema: 
        type: integer
        default: 50
    PathBookId:
      name: bookId
      in: path
      required: true
      schema:
        type: string
    PathVisitorId:
      name: visitorId
      in: path
      required: true
      schema:
        type: string
  responses:
    BookList_200: 
      description: List of books
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/BookListBody"
    AuthorList_200: 
      description: List of books
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/AuthorListBody"
    VisitorBook_200:
      description: List of books and visitors
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VisitorBookBody"
    VisitorActivity_200:
      description: List of a visitor's activities
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VisitorActivityBody"
    '400':
      description: Bad Request 
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/BadRequestBody"
    '403':
      description: Forbidden
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/ForbiddenBody"
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/InternalServerErrorBody"
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https//api/oauth/security.com/authorize"
          scopes:
            read: reading acces
        password:
          tokenUrl: "https//api/security.com/token"
          scopes:
            write: writing acces
        clientCredentials:
          tokenUrl: "https//api/security.com/token"
          scopes:
            admin: administrator acces
