openapi: 3.0.3
info:
  title: Library API
  version: 1.1.1
  description: STD22103
servers:
  - url: https://library.com
tags:
  - name: Books  
  - name: Authors
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: the starting date
          required: false
          schema: 
            type: string
            format: date
        - name: finalDate
          in: query
          description: the ending date
          required: false
          schema: 
            type: string
            format: date
        - $ref: "#/components/parameters/queryPagination"
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      summary: Get all authors 
      description: The returned authors are ordered by name 
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: name
          description: filter authors by name
          required: false
          schema: 
            type: string
      responses:
        200: 
          description: list of filter author 
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody: 
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: list of created or updated author
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Author'
  /authors/{id}:
    delete:
      summary: Delete an author
      description: Delete an author by id 
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: id 
          in: path
          required: true
          schema: 
            type: string
      responses:
        200:
          description: An author deleted
  /multipleDelete:
    delete: 
      summary: Delete multiple authors
      description: Delete multiple authors by their ids
      requestBody: 
        content:
          application/json: 
            schema: 
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Multiple authors deleted
  /authors/{pathPagination}:
    get:
      summary: Get all authors
      operationId: getAuthorsPagination
      tags:
        - Authors
      parameters:
        - $ref: "#/components/parameters/pathPagination"
      responses: 
        200:
          description: List of all authors
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Author"
        
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema: 
            type: string
          required: true
      responses:
        200:
          description: The updated book with author
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Book"
  /books/authors: 
    put:
      tags:
        - Books
      operationId: updateBookAuthor 
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items: 
                $ref: "#/components/schemas/UpdateBookAuthor"  
      responses:
        200:
          description: The updated book with the author
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UpdateBookAuthor"     
components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            author: 
              $ref: "#/components/schemas/Author"
    Author: 
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - F
            - M
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
      required:
        - bookId
        - authorId
  parameters:
    queryPagination:
      name: queryPagination 
      in: query
      required:  false
      schema: 
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize: 
            type: integer
            default: 50
    pathPagination: 
      name: pathPagination 
      in: path
      required: false
      schema: 
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize: 
            type: integer
            default: 50

          